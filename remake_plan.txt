Remake Plan for Habit Tracker Web App (from Gradio to Flask)

1. Use Flask for the web backend and HTML/CSS/JS for the frontend.
2. Keep the data logic modular and reuse as much as possible from app.py (data loading, saving, habit logic).
3. Provide endpoints for:
   - User registration and login (per-user data)
   - Viewing habits
   - Adding, editing, or removing habits (including start date and schedule)
   - Marking a habit as done/not done
   - Viewing agenda for a selected day
   - Calendar view for monthly completion
   - **AI Powered Planning**: Add, remove, or change habits using natural language
   - Chatting with an AI assistant about the schedule
4. Create simple HTML templates for:
   - Habit setup (add/view/edit/remove habits)
   - Agenda view (mark habits for a day)
   - Calendar view (color-coded)
   - Register/login
   - Chat and AI planning UI
5. Use AJAX (fetch API) for marking habits, updating agenda, editing/removing habits, and AI planning without full page reloads.
6. Update requirements.txt to include Flask, pandas, openai, python-dotenv.
7. Document all changes in this file and commands run.
8. Add Docker support for easy deployment.

Commands run:
- python -m venv venv
- venv\Scripts\activate.bat
- pip install -r requirements.txt
- Added/updated Flask app, templates, and modular data logic
- Implemented OpenAI-powered chat and AI planning
- Added Dockerfile and .dockerignore for containerization

Files created/modified:
- habit_data.py (modular data logic, per-user)
- requirements.txt (added flask, pandas, openai, python-dotenv)
- app_flask.py (Flask app)
- templates/index.html (setup page, chat, AI planning)
- templates/agenda.html (agenda page)
- templates/calendar.html (calendar page)
- templates/register.html, templates/login.html (user auth)
- app_summary.txt (app summary)
- why_flask_python.txt (why Flask/Python)
- README.md (usage instructions, Docker instructions)
- .env (OpenAI API key and Flask secret, not tracked by git)
- users.json (user credentials, now stored in user_data/)
- Dockerfile (Docker build)
- .dockerignore (Docker ignore rules)

To run the new app:
1. Activate your venv: venv\Scripts\activate.bat
2. Install requirements: pip install -r requirements.txt
3. Set your OpenAI API key and Flask secret in .env
4. Run: python app_flask.py
5. Visit http://127.0.0.1:5000/ in your browser

To run with Docker:
1. Build: docker build -t habit-tracker-ai .
2. Run: docker run -d -p 5000:5000 --env-file .env -v $(pwd)/user_data:/app/user_data habit-tracker-ai
